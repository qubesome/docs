{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"qubesome This project is a command-line interface (CLI) tool aimed at simplifying managing Linux desktop configurations. It works by virtualizing both the Window Manager and the workloads based on a declarative state from a git repository. Some isolation levels are available to further secure and constraint each workload. How can it be useful? Version control your window manager and workloads configuration. Bump configuration and software versions via PRs - and roll them back in the same way. Provide isolation across profiles and workloads (clipboard, network, storage, etc). Test-drive Window Manager configurations without having to commit to them or needing to impact your existing setup. Simplify the sharing of Window Manager configuration. Quick Start Installation openSUSE Leap and Tumbleweed zypper install -y qubesome Go install Info This requires Golang to be installed. You can download and install Golang by following the instructions at https://golang.org/doc/install . Ensure that the Go bin directory (usually $HOME/go/bin ) is added to your PATH . For guidance on updating your PATH , refer to GOPATH and GOBIN in https://golang.org/doc/gopath_code.html . go install github.com/qubesome/cli/cmd/qubesome@latest Build from source Info This requires Golang to be installed. You can download and install Golang by following the instructions at https://golang.org/doc/install . git clone https://github.com/qubesome/cli cd cli make build The binary is available at build/bin/qubesome and can be installed at machine level with: sudo install -m 755 build/bin/qubesome /usr/local/bin/ Release binaries The repository release page include binaries for amd64 , arm64 and riscv64 , and can be found at https://github.com/qubesome/cli/releases. Usage To start a new Window Manager profile based on the sample dotfiles, set the Git repository and the profile name. Sample awesomeWM qubesome start -git https://github.com/qubesome/sample-dotfiles awesome Sample i3 qubesome start -git https://github.com/qubesome/sample-dotfiles i3","title":"Home"},{"location":"#qubesome","text":"This project is a command-line interface (CLI) tool aimed at simplifying managing Linux desktop configurations. It works by virtualizing both the Window Manager and the workloads based on a declarative state from a git repository. Some isolation levels are available to further secure and constraint each workload.","title":"qubesome"},{"location":"#how-can-it-be-useful","text":"Version control your window manager and workloads configuration. Bump configuration and software versions via PRs - and roll them back in the same way. Provide isolation across profiles and workloads (clipboard, network, storage, etc). Test-drive Window Manager configurations without having to commit to them or needing to impact your existing setup. Simplify the sharing of Window Manager configuration.","title":"How can it be useful?"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#installation","text":"","title":"Installation"},{"location":"#opensuse-leap-and-tumbleweed","text":"zypper install -y qubesome","title":"openSUSE Leap and Tumbleweed"},{"location":"#go-install","text":"Info This requires Golang to be installed. You can download and install Golang by following the instructions at https://golang.org/doc/install . Ensure that the Go bin directory (usually $HOME/go/bin ) is added to your PATH . For guidance on updating your PATH , refer to GOPATH and GOBIN in https://golang.org/doc/gopath_code.html . go install github.com/qubesome/cli/cmd/qubesome@latest","title":"Go install"},{"location":"#build-from-source","text":"Info This requires Golang to be installed. You can download and install Golang by following the instructions at https://golang.org/doc/install . git clone https://github.com/qubesome/cli cd cli make build The binary is available at build/bin/qubesome and can be installed at machine level with: sudo install -m 755 build/bin/qubesome /usr/local/bin/","title":"Build from source"},{"location":"#release-binaries","text":"The repository release page include binaries for amd64 , arm64 and riscv64 , and can be found at https://github.com/qubesome/cli/releases.","title":"Release binaries"},{"location":"#usage","text":"To start a new Window Manager profile based on the sample dotfiles, set the Git repository and the profile name.","title":"Usage"},{"location":"#sample-awesomewm","text":"qubesome start -git https://github.com/qubesome/sample-dotfiles awesome","title":"Sample awesomeWM"},{"location":"#sample-i3","text":"qubesome start -git https://github.com/qubesome/sample-dotfiles i3","title":"Sample i3"},{"location":"faq/","text":"FAQ Does it provide any sort of isolation across profiles? This largely depends on the configuration, but overall the main supported runner is based on Docker, which comes with the limitations of container-level isolation. However, here are a few highlights: Xorg instance isolation : Each Qubesome profile can be executed on its own Xorg display, which translates into clipboard isolation across workloads in different profiles. Host Access : Each profile can define host access (e.g., device, network, dbus) allowed for its workloads. For example, having a Work profile and a Personal profile, it is possible to limit what parts of the disk (or external storage) can be mounted to each. Per-workload Network Access (Experimental) : Ability to control network/internet access for each workload and run the window manager without internet access. Auditing access violations provides visibility into when workloads are trying to access things they should not. Is rootless supported? Yes. Only when Podman is being used as runner. Why do I need to run xhost +SI:localuser:${USER} ? Some Linux distributions, such as Tumbleweed, enable X11 access controls by default for security purposes. This means that Qubesome requires explicit permission to access the X11 server. To grant this access for the current local user, run the following command: xhost +SI:localuser: ${ USER } This step ensures that Qubesome can function properly while maintaining the security of your system. If xhost is not present, it can be installed with sudo zypper install xhost .","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#does-it-provide-any-sort-of-isolation-across-profiles","text":"This largely depends on the configuration, but overall the main supported runner is based on Docker, which comes with the limitations of container-level isolation. However, here are a few highlights: Xorg instance isolation : Each Qubesome profile can be executed on its own Xorg display, which translates into clipboard isolation across workloads in different profiles. Host Access : Each profile can define host access (e.g., device, network, dbus) allowed for its workloads. For example, having a Work profile and a Personal profile, it is possible to limit what parts of the disk (or external storage) can be mounted to each. Per-workload Network Access (Experimental) : Ability to control network/internet access for each workload and run the window manager without internet access. Auditing access violations provides visibility into when workloads are trying to access things they should not.","title":"Does it provide any sort of isolation across profiles?"},{"location":"faq/#is-rootless-supported","text":"Yes. Only when Podman is being used as runner.","title":"Is rootless supported?"},{"location":"faq/#why-do-i-need-to-run-xhost-silocaluseruser","text":"Some Linux distributions, such as Tumbleweed, enable X11 access controls by default for security purposes. This means that Qubesome requires explicit permission to access the X11 server. To grant this access for the current local user, run the following command: xhost +SI:localuser: ${ USER } This step ensures that Qubesome can function properly while maintaining the security of your system. If xhost is not present, it can be installed with sudo zypper install xhost .","title":"Why do I need to run xhost +SI:localuser:${USER}?"}]}